import streamlit as st
import pandas as pd
import pickle
import sklearn

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    with open('xgb_classifier.pkl', 'rb') as f:
        return pickle.load(f)

model = load_model()

st.title ("üîÆ–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")

# Drug & Drop –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ —Ñ–∞–π–ª Excel/csv —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞",
                                type=['xlsx', 'csv'])

if uploaded_file:
    if uploaded_file.name.endswith('.xlsx'):
        df = pd.read_excel(uploaded_file)
    elif uploaded_file.name.endswith('.csv'): 
        df = pd.read_csv(uploaded_file)
    else:
        pass
    st.write("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    
    # –ü—Ä–µ–¥–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
    df['Date'] = pd.to_datetime(df['Date'])
    df['Day'] = df['Date'].dt.day
    df['Month'] = df['Date'].dt.month
    df['Year'] = df['Date'].dt.year
    
    new_names = ["–ò–î", "–ê–ó–°", "–û–ø–µ—Ä–∞—Ç–æ—Ä", "–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä", "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç", "–í–∏–¥ –æ–ø–ª–∞—Ç—ã", "–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
              "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "‚Ññ –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç—ã", "‚Ññ —á–µ–∫–∞", "–¶–µ–Ω–∞", "–°–∫–∏–¥–∫–∞", "–ë–æ–Ω—É—Å–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ", "–ë–æ–Ω—É—Å–æ–≤ —Å–ø–∏—Å–∞–Ω–æ",
              "–û—Å—Ç–∞—Ç–æ–∫ –±–æ–Ω—É—Å–æ–≤", "–ö–æ–ª-–≤–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –°–¢)", "–û–±—ä–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ü)", "–ú–∞—Å—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ü)",
              "–í—Ä–µ–º—è —Å—É—Ç–æ–∫", "–î–∞—Ç–∞", "–î–µ–Ω—å", "–ú–µ—Å—è—Ü", "–ì–æ–¥"]
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    df.columns = new_names

    # –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ü–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö, –∞ –Ω–µ —Ç–∏–ø–∞ "datetime"
    df['–í—Ä–µ–º—è —Å—É—Ç–æ–∫ —Å–µ–∫—É–Ω–¥—ã'] = df['–í—Ä–µ–º—è —Å—É—Ç–æ–∫'].apply(lambda x: int(x.split(':')[0]) * 3600
                                                                               + int(x.split(':')[1]) * 60 + int(x.split(':')[2]))
    df['–í—Ä–µ–º—è —Å—É—Ç–æ–∫ —á–∞—Å—ã'] = df['–í—Ä–µ–º—è —Å—É—Ç–æ–∫ —Å–µ–∫—É–Ω–¥—ã'] / 3600
    df.drop('–í—Ä–µ–º—è —Å—É—Ç–æ–∫', axis=1, inplace=True)

    # –û—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–æ–¥–µ–ª—å—é
    df = df[['–û–ø–µ—Ä–∞—Ç–æ—Ä', '–¶–µ–Ω–∞', '–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç', '–í–∏–¥ –æ–ø–ª–∞—Ç—ã', '–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', '–û–±—ä–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ü)', '–í—Ä–µ–º—è —Å—É—Ç–æ–∫ —á–∞—Å—ã']]
    df.columns = ['–ü–æ—Å–ª–µ–¥–Ω–∏–π(–∞—è) –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ –æ—Ç—Ç–æ–∫–æ–º', '–ü–æ—Å–ª–µ–¥–Ω–∏–π(–∞—è) –¶–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç—Ç–æ–∫–æ–º', '–ü–æ—Å–ª–µ–¥–Ω–∏–π(–∞—è) –ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç –ø–µ—Ä–µ–¥ –æ—Ç—Ç–æ–∫–æ–º',
              '–ü–æ—Å–ª–µ–¥–Ω–∏–π(–∞—è) –í–∏–¥ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç—Ç–æ–∫–æ–º', '–ü–æ—Å–ª–µ–¥–Ω–∏–π(–∞—è) –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç—Ç–æ–∫–æ–º', '–ü–æ—Å–ª–µ–¥–Ω–∏–π(–∞—è) –û–±—ä–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ü) –ø–µ—Ä–µ–¥ –æ—Ç—Ç–æ–∫–æ–º',
              '–ü–æ—Å–ª–µ–¥–Ω–∏–π(–∞—è) –í—Ä–µ–º—è —Å—É—Ç–æ–∫ —á–∞—Å—ã –ø–µ—Ä–µ–¥ –æ—Ç—Ç–æ–∫–æ–º']
    
    st.dataframe(df)
   
# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ç—Ç–æ–∫"):
    prediction = model.predict(df)
    probability = model.predict_proba(df)

    if prediction[0] == 1:
        st.error(f"üÜò–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞: {probability[0][1]: .2%)}")
    elif prediction[0] == 0:
        st.success(f"üéâ–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞: {probability[0][0]: .2%}")
    else:
        st.write("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")



















